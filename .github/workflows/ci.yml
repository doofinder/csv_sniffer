name: CI

on: [pull_request]

jobs:
  test:
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.draft == false)
    runs-on: ubuntu-latest
    env:
      HEX_KEY: ${{ secrets.HEX_KEY }}
      MIX_ENV: test
    steps:
      - uses: actions/checkout@v4
      - uses: asdf-vm/actions/setup@v3

      - name: asdf cache
        id: asdf-cache
        uses: actions/cache@v4
        with:
          path: ~/.asdf/
          key: ${{ runner.os }}-${{ hashFiles('.tool-versions') }}-asdf-files

      - uses: asdf-vm/actions/install@v3

      - name: Retrieve Mix Dependencies Cache
        uses: actions/cache@v4
        id: mix-cache #id to use in retrieve action
        with:
          path: deps
          key: ${{ runner.os }}-${{ hashFiles('.tool-versions') }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}

      # see https://github.com/actions/cache/tree/main#known-practices-and-workarounds
      - name: Retrieve & update test compiled cache on every commit
        uses: actions/cache@v4
        with:
          path: _build/test
          key: ${{ runner.os }}-${{ hashFiles('.tool-versions') }}-test-cache-${{ github.run_id}}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('.tool-versions') }}-test-cache

      # see https://github.com/actions/cache/tree/main#known-practices-and-workarounds
      - name: Retrieve & update dev compiled cache on every commit
        uses: actions/cache@v4
        with:
          path: _build/dev
          key: ${{ runner.os }}-${{ hashFiles('.tool-versions') }}-dev-cache-${{ github.run_id}}
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('.tool-versions') }}-dev-cache

      - name: Install Mix Dependencies
        if: steps.mix-cache.outputs.cache-hit != 'true'
        run: |
          mix local.rebar --force
          mix local.hex --force
          mix hex.organization auth doofinder --key $HEX_KEY
          mix deps.get

      - name: Compile dependencies
        run: mix deps.compile
        env:
          MIX_ENV: dev

      - name: Check warnings
        run: mix compile --warnings-as-errors --no-deps-check
        env:
          MIX_ENV: dev

      - name: Check Formatting
        run: mix format --check-formatted

      - name: Run credo
        run: mix credo --strict --ignore todo

      - name: Run Tests
        run: mix test

      - name: Run dialyzer
        run: mix dialyzer
        env:
          MIX_ENV: dev

      - name: Run Sobelow
        run: mix sobelow --compact --exit $SEVERITY
        env:
          MIX_ENV: dev
          SEVERITY: 0 # Possible values: high, medium, low, 0 (with 0, it doesn't exit on any finding encountered)
